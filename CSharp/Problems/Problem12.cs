using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CSharp.Helpers;

namespace CSharp.Problems {
	public class Problem12 : IProblem {
		//Problem 12: Highly divisible triangular number
		//The sequence of triangle numbers is generated by adding the natural numbers. 
		//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
		//The first ten terms would be:
		//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		//Let us list the factors of the first seven triangle numbers:
		//1: 1
		//3: 1,3
		//6: 1,2,3,6
		//10: 1,2,5,10
		//15: 1,3,5,15
		//21: 1,3,7,21
		//28: 1,2,4,7,14,28
		//We can see that 28 is the first triangle number to have over five divisors.

		//What is the value of the first triangle number to have over five hundred divisors?
		//Problem 12 Answer: 76576500
		//Elapsed Time (seconds): 0.4420253

		public string GetAnswer() {
			var answer = findTriangleNumberWith_N_Factors(500);
			return answer.ToString();
		}
		private int findTriangleNumberWith_N_Factors(int n){
			var startNumber = 1;
			IEnumerable<int> f;
			var t = 0;
			do {
				startNumber++;
				t = getTriangleNumber(startNumber);
				f = getFactors(t);				
			} while (f.Count() < n);
			return t;
		}
		private int getTriangleNumber(int n) {
			var a = 0;
			for (int i = 1; i <= n; i++) {
				a += i;
			}
			return a;
		}
		private List<int> getFactors(int n) {
			List<int> factors = new List<int>{ 1, n};
			int max = (int)Math.Sqrt(n);  //round down
			for (int factor = 2; factor <= max; ++factor) { //test from 1 to the square root, or the int below it, inclusive.
				if (n % factor == 0) {
					factors.Add(factor);
					if (factor != n / factor) { // Don't add the square root twice!  Thanks Jon
						factors.Add(n / factor);
					}
				}
			}
			return factors;
		}
	}
}
